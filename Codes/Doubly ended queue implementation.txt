class MyCircularDeque {
    int k;
    int arr[];
    int rear = -1;
    int front = -1;
    public MyCircularDeque(int k) {
        arr = new int[k];
        this.k = k;
    }
    
    public boolean insertFront(int value) {
        if(isFull())
            return false;
        
        else if(isEmpty())
            rear=front=0;
        
        else if(front==0){
            front = k-1;
        }
        
        else
            front--;
        
        arr[front] = value;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(isFull())
            return false;
        
        else if(isEmpty())
            front = rear = 0;
        
        else
            rear = (rear+1)%k;
        
        arr[rear] = value;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty())
            return false;
        
        else if(front==rear)        //checking if there's only one element left so that we can set the value of front and rear to -1;
            rear=front=-1;
        
        else
            front = (front+1)%k;
        
        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty())
            return false;
        
        else if(rear==front)
            rear=front=-1;
        
        else if(rear==0)
            rear = k-1;
        
        else
            rear--;
        
        return true;
    }
    
    public int getFront() {
        if(isEmpty())
            return -1;
        return arr[front];
    }
    
    public int getRear() {
        if(isEmpty())
            return -1;
        return arr[rear];
    }
    
    public boolean isEmpty() {
        return front==-1 && rear==-1;
    }
    
    public boolean isFull() {
        return (rear+1)%k == front;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */