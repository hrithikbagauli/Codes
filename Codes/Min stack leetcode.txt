import java.util.Stack;
class MinStack {
    int min=Integer.MAX_VALUE;
    
    Stack<Integer> s = new Stack<>();
    Stack<Integer> s2 = new Stack<>();
    
    public void push(int val) {
        s.push(val);
        if(min>=val){
            min = val;
            s2.push(min);
        }
        
    }
    
    public void pop() {
        if(s.peek().equals(s2.peek())){ //the reason we used equals here, instead of ==, is because we're the comparing the values of two different stacks i.e. we used the "new" keyword to create two stacks, meaning each of them point to a different memory location and == only gives the result as true when both the memory reference and the values are same. equals() only compares the values, regardless of their memory location.
            s2.pop();
            min = s2.peek();
        }
        
        s.pop();
    }
    
    public int top() {
        return s.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */